import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import json
import sqlite3
import hashlib
import requests
import time
from streamlit_option_menu import option_menu
import io
import psycopg2
from psycopg2.extras import RealDictCursor
import os

# ================================
# CONFIGURA√á√ïES INICIAIS
# ================================
st.set_page_config(
    page_title="üå± AgroGest√£o - Gest√£o Agr√≠cola",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="üå±"
)

# Aplicar tema escuro personalizado
def apply_dark_theme():
    st.markdown("""
    <style>
    .main {
        background-color: #0E1117;
        color: #FAFAFA;
    }
    .stButton>button {
        background-color: #2d5016;
        color: white;
        border-radius: 8px;
        padding: 10px 24px;
        border: none;
        font-weight: 600;
    }
    .stButton>button:hover {
        background-color: #3a6520;
        color: white;
    }
    .card {
        background-color: #1a1a1a;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    .metric-card {
        background-color: #1a1a1a;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #2d5016;
    }
    .oracle-message {
        background-color: #2d5016;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }
    .user-message {
        background-color: #1a3d5c;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }
    h1, h2, h3, h4, h5, h6 {
        color: #FAFAFA;
    }
    .error {
        color: #ff4b4b;
    }
    .success {
        color: #2ecc71;
    }
    </style>
    """, unsafe_allow_html=True)

apply_dark_theme()

# ================================
# CONSTANTES E CONFIGURA√á√ïES
# ================================
API_KEY = "eef20bca4e6fb1ff14a81a3171de5cec"
DEEPSEEK_API_KEY = "sk-0ad4c39ad4c14aa09a0decc40b60e7d3"
DEFAULT_CITY = "Londrina"

# Configura√ß√µes do PostgreSQL
DB_CONFIG = {
    "host": "dpg-d361csili9vc738rea90-a.oregon-postgres.render.com",
    "database": "postgresql_agro",
    "user": "postgresql_agro_user",
    "password": "gl5pErtk8tC2vqFLfswn7B7ocoxK7gk5",
    "port": "5432"
}

# ================================
# SISTEMA OR√ÅCULO (AI ASSISTANT)
# ================================
class AgroOracle:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.deepseek.com/v1/chat/completions"
    
    def get_database_context(self):
        """Obt√©m contexto completo do banco de dados para o or√°culo"""
        productions_df = load_productions()
        inputs_df = load_inputs()
        price_config = load_price_config()
        
        context = "CONTEXTO DO BANCO DE DADOS AGROGEST√ÉO:\n\n"
        
        # Contexto das produ√ß√µes
        if not productions_df.empty:
            context += "PRODU√á√ïES REGISTRADAS:\n"
            context += f"Total de registros: {len(productions_df)}\n"
            context += f"Per√≠odo: {productions_df['date'].min()} at√© {productions_df['date'].max()}\n"
            context += f"Culturas: {', '.join(productions_df['product'].unique())}\n"
            context += f"Locais: {', '.join(productions_df['local'].unique())}\n"
            
            total_first = productions_df['first_quality'].sum()
            total_second = productions_df['second_quality'].sum()
            context += f"Produ√ß√£o total: {total_first + total_second:.0f} caixas ({total_first:.0f} 1¬™ qualidade, {total_second:.0f} 2¬™ qualidade)\n\n"
        else:
            context += "PRODU√á√ïES: Nenhum dado registrado ainda.\n\n"
        
        # Contexto dos insumos
        if not inputs_df.empty:
            context += "INSUMOS REGISTRADOS:\n"
            context += f"Total de registros: {len(inputs_df)}\n"
            context += f"Tipos: {', '.join(inputs_df['type'].unique())}\n"
            context += f"Custo total: R$ {inputs_df['cost'].sum():.2f}\n\n"
        else:
            context += "INSUMOS: Nenhum dado registrado ainda.\n\n"
        
        # Contexto dos pre√ßos
        if not price_config.empty:
            context += "PRE√áOS CONFIGURADOS:\n"
            for _, row in price_config.iterrows():
                context += f"{row['product']}: 1¬™ qualidade R$ {row['first_quality_price']:.2f}, 2¬™ qualidade R$ {row['second_quality_price']:.2f}\n"
            context += "\n"
        
        return context
    
    def analyze_financials(self):
        """An√°lise financeira para o or√°culo"""
        productions_df = load_productions()
        inputs_df = load_inputs()
        financials = calculate_financials(productions_df, inputs_df)
        
        analysis = "AN√ÅLISE FINANCEIRA:\n"
        analysis += f"Receita Total: R$ {financials['total_revenue']:.2f}\n"
        analysis += f"Custos Totais: R$ {financials['total_costs']:.2f}\n"
        analysis += f"Lucro L√≠quido: R$ {financials['profit']:.2f}\n"
        analysis += f"Margem de Lucro: {financials['profit_margin']:.1f}%\n"
        
        if financials['profit_margin'] > 20:
            analysis += "‚úÖ Situa√ß√£o financeira: Excelente\n"
        elif financials['profit_margin'] > 10:
            analysis += "‚ö†Ô∏è Situa√ß√£o financeira: Boa\n"
        else:
            analysis += "‚ùå Situa√ß√£o financeira: Precisa de aten√ß√£o\n"
        
        return analysis
    
    def query_oracle(self, user_message):
        """Consulta o or√°culo com a mensagem do usu√°rio"""
        try:
            # Obter contexto do banco
            db_context = self.get_database_context()
            financial_analysis = self.analyze_financials()
            
            system_prompt = f"""Voc√™ √© o Or√°culo AgroGest√£o, um especialista em an√°lise agr√≠cola com acesso completo aos dados do sistema.

{db_context}
{financial_analysis}

INSTRU√á√ïES:
- Seja natural e conversacional, como um especialista agr√≠cola
- Use os dados do banco para embasar suas respostas
- Forne√ßa insights pr√°ticos e acion√°veis
- Quando relevante, mencione n√∫meros espec√≠ficos dos dados
- Se n√£o souber algo baseado nos dados, seja honesto
- Mantenha as respostas claras e √∫teis para o gestor agr√≠cola

Exemplos de como responder:
- "Analisando seus dados, vejo que sua produ√ß√£o de tomate..."
- "Com base nos registros, sua receita total est√° em..."
- "Observando seus custos, sugiro aten√ß√£o com..."

Agora responda a pergunta do usu√°rio:"""
            
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                "temperature": 0.7,
                "max_tokens": 1000
            }
            
            response = requests.post(self.base_url, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                return f"Erro na API: {response.status_code}. {response.text}"
                
        except Exception as e:
            return f"Erro ao consultar o or√°culo: {str(e)}"

# Inicializar o or√°culo
oracle = AgroOracle(DEEPSEEK_API_KEY)

# ================================
# FUN√á√ïES DE BANCO DE DADOS (POSTGRESQL)
# ================================
def get_db_connection():
    """Estabelece conex√£o com o PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host=DB_CONFIG["host"],
            database=DB_CONFIG["database"],
            user=DB_CONFIG["user"],
            password=DB_CONFIG["password"],
            port=DB_CONFIG["port"]
        )
        return conn
    except Exception as e:
        st.error(f"Erro ao conectar com o banco de dados: {str(e)}")
        return None

def init_db():
    """Inicializa as tabelas no PostgreSQL"""
    conn = get_db_connection()
    if conn is None:
        return
    
    try:
        c = conn.cursor()
        
        # Tabela de produ√ß√µes
        c.execute('''CREATE TABLE IF NOT EXISTS productions
                     (id SERIAL PRIMARY KEY,
                      date TEXT NOT NULL,
                      local TEXT NOT NULL,
                      product TEXT NOT NULL,
                      first_quality REAL NOT NULL,
                      second_quality REAL NOT NULL,
                      temperature REAL,
                      humidity REAL,
                      rain REAL,
                      weather_data TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # Tabela de insumos
        c.execute('''CREATE TABLE IF NOT EXISTS inputs
                     (id SERIAL PRIMARY KEY,
                      date TEXT NOT NULL,
                      type TEXT NOT NULL,
                      description TEXT NOT NULL,
                      quantity REAL NOT NULL,
                      unit TEXT NOT NULL,
                      cost REAL NOT NULL,
                      location TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # Tabela de configura√ß√µes de pre√ßos
        c.execute('''CREATE TABLE IF NOT EXISTS price_config
                     (id SERIAL PRIMARY KEY,
                      product TEXT NOT NULL,
                      first_quality_price REAL NOT NULL,
                      second_quality_price REAL NOT NULL,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      UNIQUE(product))''')
        
        # Tabela de conversas com o or√°culo
        c.execute('''CREATE TABLE IF NOT EXISTS oracle_conversations
                     (id SERIAL PRIMARY KEY,
                      user_message TEXT NOT NULL,
                      oracle_response TEXT NOT NULL,
                      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # Verificar se a tabela price_config est√° vazia
        c.execute("SELECT COUNT(*) FROM price_config")
        if c.fetchone()[0] == 0:
            default_prices = [
                ("Tomate", 15.0, 8.0),
                ("Alface", 12.0, 6.0),
                ("Pepino", 10.0, 5.0),
                ("Piment√£o", 18.0, 9.0),
                ("Morango", 25.0, 12.0)
            ]
            for product, first_price, second_price in default_prices:
                c.execute("INSERT INTO price_config (product, first_quality_price, second_quality_price) VALUES (%s, %s, %s) ON CONFLICT (product) DO NOTHING", 
                         (product, first_price, second_price))
        
        conn.commit()
    except Exception as e:
        st.error(f"Erro ao inicializar banco de dados: {str(e)}")
    finally:
        conn.close()

def save_production(date, local, product, first_quality, second_quality, temperature, humidity, rain, weather_data):
    conn = get_db_connection()
    if conn is None:
        return False
    
    try:
        c = conn.cursor()
        c.execute("INSERT INTO productions (date, local, product, first_quality, second_quality, temperature, humidity, rain, weather_data) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
                  (date, local, product, first_quality, second_quality, temperature, humidity, rain, weather_data))
        conn.commit()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar produ√ß√£o: {str(e)}")
        return False
    finally:
        conn.close()

def load_productions():
    conn = get_db_connection()
    if conn is None:
        return pd.DataFrame()
    
    try:
        df = pd.read_sql_query("SELECT * FROM productions ORDER BY date DESC", conn)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar produ√ß√µes: {str(e)}")
        return pd.DataFrame()
    finally:
        conn.close()

def delete_production(production_id):
    conn = get_db_connection()
    if conn is None:
        return False
    
    try:
        c = conn.cursor()
        c.execute("DELETE FROM productions WHERE id = %s", (production_id,))
        conn.commit()
        return True
    except Exception as e:
        st.error(f"Erro ao excluir produ√ß√£o: {str(e)}")
        return False
    finally:
        conn.close()

def save_input(date, input_type, description, quantity, unit, cost, location):
    conn = get_db_connection()
    if conn is None:
        return False
    
    try:
        c = conn.cursor()
        c.execute("INSERT INTO inputs (date, type, description, quantity, unit, cost, location) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                  (date, input_type, description, quantity, unit, cost, location))
        conn.commit()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar insumo: {str(e)}")
        return False
    finally:
        conn.close()

def load_inputs():
    conn = get_db_connection()
    if conn is None:
        return pd.DataFrame()
    
    try:
        df = pd.read_sql_query("SELECT * FROM inputs ORDER BY date DESC", conn)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar insumos: {str(e)}")
        return pd.DataFrame()
    finally:
        conn.close()

def load_price_config():
    conn = get_db_connection()
    if conn is None:
        return pd.DataFrame()
    
    try:
        df = pd.read_sql_query("SELECT * FROM price_config", conn)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√µes de pre√ßo: {str(e)}")
        return pd.DataFrame()
    finally:
        conn.close()

def save_price_config(product, first_price, second_price):
    conn = get_db_connection()
    if conn is None:
        return False
    
    try:
        c = conn.cursor()
        c.execute("INSERT INTO price_config (product, first_quality_price, second_quality_price) VALUES (%s, %s, %s) ON CONFLICT (product) DO UPDATE SET first_quality_price = %s, second_quality_price = %s",
                  (product, first_price, second_price, first_price, second_price))
        conn.commit()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar configura√ß√£o de pre√ßo: {str(e)}")
        return False
    finally:
        conn.close()

def save_conversation(user_message, oracle_response):
    """Salva a conversa com o or√°culo no banco"""
    conn = get_db_connection()
    if conn is None:
        return False
    
    try:
        c = conn.cursor()
        c.execute("INSERT INTO oracle_conversations (user_message, oracle_response) VALUES (%s, %s)",
                  (user_message, oracle_response))
        conn.commit()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar conversa: {str(e)}")
        return False
    finally:
        conn.close()

def load_conversations(limit=10):
    """Carrega hist√≥rico de conversas"""
    conn = get_db_connection()
    if conn is None:
        return pd.DataFrame()
    
    try:
        df = pd.read_sql_query(f"SELECT * FROM oracle_conversations ORDER BY timestamp DESC LIMIT {limit}", conn)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar conversas: {str(e)}")
        return pd.DataFrame()
    finally:
        conn.close()

# ================================
# FUN√á√ïES DE API CLIM√ÅTICA
# ================================
def get_weather_data(city):
    """Busca dados clim√°ticos da API OpenWeather"""
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=pt_br"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return {
                "temperature": data["main"]["temp"],
                "humidity": data["main"]["humidity"],
                "rain": data.get("rain", {}).get("1h", 0) if "rain" in data else 0,
                "description": data["weather"][0]["description"],
                "city": data["name"],
                "country": data["sys"]["country"],
                "icon": data["weather"][0]["icon"]
            }
        else:
            return None
    except Exception as e:
        return None

# ================================
# FUN√á√ïES DE C√ÅLCULO FINANCEIRO
# ================================
def calculate_financials(productions_df, inputs_df):
    price_config = load_price_config()
    
    if productions_df.empty:
        return {
            "total_revenue": 0,
            "first_quality_revenue": 0,
            "second_quality_revenue": 0,
            "total_costs": 0,
            "profit": 0,
            "profit_margin": 0
        }
    
    # Calcular receita
    revenue_data = []
    for _, row in productions_df.iterrows():
        product = row['product']
        price_row = price_config[price_config['product'] == product]
        
        if not price_row.empty:
            first_price = price_row['first_quality_price'].values[0]
            second_price = price_row['second_quality_price'].values[0]
        else:
            first_price = 10.0
            second_price = 5.0
        
        first_revenue = row['first_quality'] * first_price
        second_revenue = row['second_quality'] * second_price
        
        revenue_data.append({
            'product': product,
            'first_revenue': first_revenue,
            'second_revenue': second_revenue,
            'total_revenue': first_revenue + second_revenue
        })
    
    revenue_df = pd.DataFrame(revenue_data)
    total_revenue = revenue_df['total_revenue'].sum()
    first_quality_revenue = revenue_df['first_revenue'].sum()
    second_quality_revenue = revenue_df['second_revenue'].sum()
    
    # Calcular custos
    total_costs = inputs_df['cost'].sum() if not inputs_df.empty else 0
    
    # Calcular lucro e margem
    profit = total_revenue - total_costs
    profit_margin = (profit / total_revenue * 100) if total_revenue > 0 else 0
    
    return {
        "total_revenue": total_revenue,
        "first_quality_revenue": first_quality_revenue,
        "second_quality_revenue": second_quality_revenue,
        "total_costs": total_costs,
        "profit": profit,
        "profit_margin": profit_margin
    }

# ================================
# P√ÅGINA DO OR√ÅCULO AGRO
# ================================
def show_oracle_page():
    st.title("üîÆ Or√°culo AgroGest√£o")
    st.markdown("üí¨ Converse com nosso especialista AI que conhece todos os seus dados!")
    
    # Inicializar hist√≥rico de conversa na session state
    if 'conversation_history' not in st.session_state:
        st.session_state.conversation_history = []
    
    # Carregar conversas anteriores
    with st.expander("üìú Hist√≥rico de Conversas Anteriores"):
        conversations_df = load_conversations(5)
        if not conversations_df.empty:
            for _, conv in conversations_df.iterrows():
                st.markdown(f"**{conv['timestamp']}**")
                st.markdown(f"<div class='user-message'><strong>Voc√™:</strong> {conv['user_message']}</div>", unsafe_allow_html=True)
                st.markdown(f"<div class='oracle-message'><strong>Or√°culo:</strong> {conv['oracle_response']}</div>", unsafe_allow_html=True)
                st.markdown("---")
        else:
            st.info("Nenhuma conversa anterior encontrada.")
    
    # Sugest√µes de perguntas
    st.subheader("üí° Sugest√µes de Perguntas")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Resumo da produ√ß√£o"):
            st.session_state.user_question = "Me d√™ um resumo geral da minha produ√ß√£o"
        if st.button("üí∞ Situa√ß√£o financeira"):
            st.session_state.user_question = "Como est√° minha situa√ß√£o financeira?"
    
    with col2:
        if st.button("üå± Melhor cultura"):
            st.session_state.user_question = "Qual √© minha cultura mais rent√°vel?"
        if st.button("‚ö†Ô∏è Problemas"):
            st.session_state.user_question = "H√° algum problema que devo me preocupar?"
    
    with col3:
        if st.button("üìà Recomenda√ß√µes"):
            st.session_state.user_question = "Quais recomenda√ß√µes voc√™ tem para melhorar?"
        if st.button("üåßÔ∏è Clima e produ√ß√£o"):
            st.session_state.user_question = "Como o clima tem afetado minha produ√ß√£o?"
    
    # √Årea de conversa√ß√£o
    st.subheader("üí¨ Conversa com o Or√°culo")
    
    # Input da pergunta
    user_question = st.text_area(
        "Fa√ßa sua pergunta sobre seus dados agr√≠colas:",
        value=st.session_state.get('user_question', ''),
        height=100,
        placeholder="Ex: Qual foi minha produ√ß√£o de tomate no √∫ltimo m√™s? Como posso melhorar meus lucros?"
    )
    
    if st.button("üîÆ Consultar o Or√°culo", type="primary"):
        if user_question.strip():
            with st.spinner("üß† O or√°culo est√° analisando seus dados..."):
                # Consultar o or√°culo
                response = oracle.query_oracle(user_question)
                
                # Salvar conversa
                save_conversation(user_question, response)
                
                # Adicionar ao hist√≥rico da sess√£o
                st.session_state.conversation_history.append({
                    'question': user_question,
                    'response': response,
                    'timestamp': datetime.now().strftime("%H:%M:%S")
                })
                
            # Exibir resposta
            st.markdown(f"<div class='oracle-message'><strong>üîÆ Or√°culo Agro:</strong> {response}</div>", unsafe_allow_html=True)
            
            # Limpar a pergunta ap√≥s enviar
            st.session_state.user_question = ""
            st.rerun()
        else:
            st.warning("Por favor, digite uma pergunta.")
    
    # Exibir hist√≥rico da sess√£o atual
    if st.session_state.conversation_history:
        st.subheader("üîÑ Conversa Atual")
        for i, conv in enumerate(reversed(st.session_state.conversation_history)):
            st.markdown(f"<div class='user-message'><strong>Voc√™ ({conv['timestamp']}):</strong> {conv['question']}</div>", unsafe_allow_html=True)
            st.markdown(f"<div class='oracle-message'><strong>Or√°culo ({conv['timestamp']}):</strong> {conv['response']}</div>", unsafe_allow_html=True)
            if i < len(st.session_state.conversation_history) - 1:
                st.markdown("---")
    
    # Estat√≠sticas r√°pidas do or√°culo
    st.subheader("üìà Vis√£o R√°pida dos Dados")
    productions_df = load_productions()
    inputs_df = load_inputs()
    
    if not productions_df.empty:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_boxes = productions_df['first_quality'].sum() + productions_df['second_quality'].sum()
            st.metric("Total Produzido", f"{total_boxes:,.0f} cx")
        
        with col2:
            total_first = productions_df['first_quality'].sum()
            st.metric("1¬™ Qualidade", f"{total_first:,.0f} cx")
        
        with col3:
            unique_products = len(productions_df['product'].unique())
            st.metric("Culturas", f"{unique_products}")
        
        with col4:
            unique_locations = len(productions_df['local'].unique())
            st.metric("Locais", f"{unique_locations}")
    
    if not inputs_df.empty:
        total_costs = inputs_df['cost'].sum()
        st.metric("Custos Totais", f"R$ {total_costs:,.2f}")

# ================================
# DASHBOARD PRINCIPAL
# ================================
def show_dashboard():
    st.title("üìä Dashboard AgroGest√£o")
    
    # Carregar dados
    productions_df = load_productions()
    inputs_df = load_inputs()
    
    # Filtros na sidebar
    st.sidebar.header("Filtros")
    
    if not productions_df.empty:
        min_date = pd.to_datetime(productions_df['date']).min().date()
        max_date = pd.to_datetime(productions_df['date']).max().date()
        
        date_range = st.sidebar.date_input(
            "Per√≠odo",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )
        
        locations = st.sidebar.multiselect(
            "Locais",
            options=productions_df['local'].unique(),
            default=productions_df['local'].unique()
        )
        
        products = st.sidebar.multiselect(
            "Culturas",
            options=productions_df['product'].unique(),
            default=productions_df['product'].unique()
        )
        
        # Aplicar filtros
        try:
            start_date, end_date = date_range
        except:
            start_date, end_date = min_date, max_date
        
        filtered_df = productions_df[
            (pd.to_datetime(productions_df['date']).dt.date >= start_date) &
            (pd.to_datetime(productions_df['date']).dt.date <= end_date) &
            (productions_df['local'].isin(locations)) &
            (productions_df['product'].isin(products))
        ]
    else:
        filtered_df = pd.DataFrame()
    
    # Calcular m√©tricas financeiras
    financials = calculate_financials(filtered_df if not filtered_df.empty else productions_df, inputs_df)
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        if not filtered_df.empty:
            total_boxes = filtered_df['first_quality'].sum() + filtered_df['second_quality'].sum()
        else:
            total_boxes = productions_df['first_quality'].sum() + productions_df['second_quality'].sum() if not productions_df.empty else 0
        st.metric("Total Produzido", f"{total_boxes:,.0f} cx")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Receita Total", f"R$ {financials['total_revenue']:,.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Custos Totais", f"R$ {financials['total_costs']:,.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Lucro L√≠quido", f"R$ {financials['profit']:,.2f}", f"{financials['profit_margin']:.1f}%")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Quick access to Oracle
    st.sidebar.markdown("---")
    st.sidebar.subheader("üîÆ Or√°culo Agro")
    if st.sidebar.button("Consultar o Or√°culo"):
        st.session_state.menu_selection = "üîÆ Or√°culo"
        st.rerun()
    
    # Gr√°ficos (mantido igual ao original)
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("Produ√ß√£o por Cultura")
        
        if not filtered_df.empty:
            production_by_product = filtered_df.groupby('product')[['first_quality', 'second_quality']].sum().reset_index()
            production_by_product['total'] = production_by_product['first_quality'] + production_by_product['second_quality']
            
            fig = px.bar(production_by_product, x='product', y='total', 
                         color='product', color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_layout(showlegend=False, plot_bgcolor='rgba(0,0,0,0)', 
                             paper_bgcolor='rgba(0,0,0,0)', font=dict(color='white'))
            st.plotly_chart(fig, use_container_width=True)
        elif not productions_df.empty:
            production_by_product = productions_df.groupby('product')[['first_quality', 'second_quality']].sum().reset_index()
            production_by_product['total'] = production_by_product['first_quality'] + production_by_product['second_quality']
            
            fig = px.bar(production_by_product, x='product', y='total', 
                         color='product', color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_layout(showlegend=False, plot_bgcolor='rgba(0,0,0,0)', 
                             paper_bgcolor='rgba(0,0,0,0)', font=dict(color='white'))
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Nenhum dado de produ√ß√£o dispon√≠vel.")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("Produ√ß√£o por √Årea/Local")
        
        if not filtered_df.empty:
            production_by_location = filtered_df.groupby('local')[['first_quality', 'second_quality']].sum().reset_index()
            production_by_location['total'] = production_by_location['first_quality'] + production_by_location['second_quality']
            
            fig = px.pie(production_by_location, values='total', names='local',
                         color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)',
                             font=dict(color='white'))
            st.plotly_chart(fig, use_container_width=True)
        elif not productions_df.empty:
            production_by_location = productions_df.groupby('local')[['first_quality', 'second_quality']].sum().reset_index()
            production_by_location['total'] = production_by_location['first_quality'] + production_by_location['second_quality']
            
            fig = px.pie(production_by_location, values='total', names='local',
                         color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)',
                             font=dict(color='white'))
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Nenhum dado de produ√ß√£o dispon√≠vel.")
        st.markdown('</div>', unsafe_allow_html=True)

    # Restante do c√≥digo do dashboard mantido igual...
    # [O restante do c√≥digo do dashboard permanece exatamente como estava]

# ================================
# P√ÅGINAS EXISTENTES (MANTIDAS)
# ================================
def show_production_page():
    # [C√≥digo mantido igual ao original]
    st.title("üìù Cadastro de Produ√ß√£o")
    
    weather_data = get_weather_data(DEFAULT_CITY)
    
    if weather_data:
        st.sidebar.header("Dados Clim√°ticos Atuais")
        st.sidebar.success("Dados clim√°ticos carregados automaticamente!")
        st.sidebar.write(f"**Cidade:** {weather_data['city']}")
        st.sidebar.write(f"**Temperatura:** {weather_data['temperature']}¬∞C")
        st.sidebar.write(f"**Umidade:** {weather_data['humidity']}%")
        st.sidebar.write(f"**Chuva:** {weather_data['rain']}mm")
        st.sidebar.write(f"**Condi√ß√£o:** {weather_data['description']}")
    else:
        st.sidebar.warning("N√£o foi poss√≠vel carregar dados clim√°ticos")

    with st.form("production_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        
        with col1:
            date = st.date_input("Data", value=datetime.now())
            location = st.text_input("Local/Estufa")
            product = st.text_input("Produto")
        
        with col2:
            first_quality = st.number_input("Caixas 1¬™ Qualidade", min_value=0.0, step=0.5)
            second_quality = st.number_input("Caixas 2¬™ Qualidade", min_value=0.0, step=0.5)
        
        if weather_data:
            temperature = weather_data['temperature']
            humidity = weather_data['humidity']
            rain = weather_data['rain']
            
            st.info(f"Dados clim√°ticos ser√£o salvos: Temperatura: {temperature}¬∞C, Umidade: {humidity}%, Chuva: {rain}mm")
        else:
            temperature = st.number_input("Temperatura (¬∞C)", value=25.0)
            humidity = st.slider("Umidade (%)", 0, 100, 60)
            rain = st.number_input("Chuva (mm)", min_value=0.0, value=0.0, step=0.1)
        
        submitted = st.form_submit_button("Salvar Produ√ß√£o")
        
        if submitted:
            if not all([location, product]):
                st.error("Preencha todos os campos obrigat√≥rios.")
            else:
                success = save_production(
                    date.isoformat(), 
                    location, 
                    product, 
                    first_quality, 
                    second_quality, 
                    temperature, 
                    humidity, 
                    rain,
                    json.dumps(weather_data) if weather_data else ""
                )
                if success:
                    st.success("Produ√ß√£o registrada com sucesso!")
                else:
                    st.error("Erro ao salvar produ√ß√£o. Verifique a conex√£o com o banco de dados.")
    
    productions_df = load_productions()
        
    if not productions_df.empty:
        st.subheader("Produ√ß√µes Recentes")
        
        for idx, row in productions_df.tail(10).iterrows():
            col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
            with col1:
                st.write(f"{row['date']} - {row['product']} em {row['local']}")
            with col2:
                st.write(f"1¬™: {row['first_quality']}cx, 2¬™: {row['second_quality']}cx")
            with col3:
                st.write(f"T: {row['temperature']}¬∞C, U: {row['humidity']}%")
            with col4:
                if st.button("üóëÔ∏è", key=f"delete_{row['id']}"):
                    if delete_production(row['id']):
                        st.success("Registro exclu√≠do com sucesso!")
                        st.rerun()
                    else:
                        st.error("Erro ao excluir registro.")

def show_inputs_page():
    # [C√≥digo mantido igual ao original]
    st.title("üí∞ Cadastro de Insumos")
    
    with st.form("inputs_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        
        with col1:
            date = st.date_input("Data", value=datetime.now())
            input_type = st.selectbox("Tipo de Insumo", 
                                     ["Semente", "Fertilizante", "Defensivo", "M√£o de Obra", "Equipamento", "Outros"])
            description = st.text_input("Descri√ß√£o")
        
        with col2:
            quantity = st.number_input("Quantidade", min_value=0.0, step=0.1)
            unit = st.selectbox("Unidade", ["kg", "L", "un", "h", "sc", "outro"])
            cost = st.number_input("Custo (R$)", min_value=0.0, step=0.01)
        
        location = st.text_input("Local aplicado")
        
        submitted = st.form_submit_button("Salvar Insumo")
        
        if submitted:
            if not all([input_type, description, quantity > 0, cost > 0]):
                st.error("Preencha todos os campos obrigat√≥rios.")
            else:
                success = save_input(
                    date.isoformat(), 
                    input_type, 
                    description, 
                    quantity, 
                    unit, 
                    cost, 
                    location
                )
                if success:
                    st.success("Insumo registrado com sucesso!")
                else:
                    st.error("Erro ao salvar insumo. Verifique a conex√£o com o banco de dados.")
    
    inputs_df = load_inputs()
        
    if not inputs_df.empty:
        st.subheader("Insumos Recentes")
        st.dataframe(inputs_df.tail(10), use_container_width=True)

def show_settings_page():
    # [C√≥digo mantido igual ao original]
    st.title("‚öôÔ∏è Configura√ß√µes de Pre√ßos")
    
    price_config = load_price_config()
    
    st.subheader("Pre√ßos Atuais por Cultura")
    if not price_config.empty:
        st.dataframe(price_config[['product', 'first_quality_price', 'second_quality_price']], 
                    use_container_width=True)
    else:
        st.info("Nenhum pre√ßo configurado. Adicione pre√ßos para suas culturas.")
    
    st.subheader("Adicionar/Editar Pre√ßos")
    with st.form("price_form"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            product = st.text_input("Cultura")
        with col2:
            first_price = st.number_input("Pre√ßo 1¬™ Qualidade (R$)", min_value=0.0, step=0.5)
        with col3:
            second_price = st.number_input("Pre√ßo 2¬™ Qualidade (R$)", min_value=0.0, step=0.5)
        
        submitted = st.form_submit_button("Salvar Pre√ßos")
        
        if submitted:
            if not all([product, first_price > 0, second_price > 0]):
                st.error("Preencha todos os campos corretamente.")
            else:
                success = save_price_config(product, first_price, second_price)
                if success:
                    st.success("Pre√ßos salvos com sucesso!")
                    st.rerun()
                else:
                    st.error("Erro ao salvar pre√ßos. Verifique a conex√£o com o banco de dados.")

def show_reports_page():
    # [C√≥digo mantido igual ao original]
    st.title("üìã Relat√≥rios")
    
    productions_df = load_productions()
    inputs_df = load_inputs()
    
    if productions_df.empty:
        st.warning("Nenhum dado dispon√≠vel para gerar relat√≥rios.")
        return
    
    st.sidebar.header("Filtros do Relat√≥rio")
    
    min_date = pd.to_datetime(productions_df['date']).min().date()
    max_date = pd.to_datetime(productions_df['date']).max().date()
    
    report_date_range = st.sidebar.date_input(
        "Per√≠odo do Relat√≥rio",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )
    
    all_locations = productions_df['local'].unique().tolist()
    selected_locations = st.sidebar.multiselect(
        "Filtrar por Local",
        options=all_locations,
        default=all_locations
    )
    
    all_products = productions_df['product'].unique().tolist()
    selected_products = st.sidebar.multiselect(
        "Filtrar por Cultura",
        options=all_products,
        default=all_products
    )
    
    report_type = st.sidebar.selectbox(
        "Tipo de Relat√≥rio",
        ["Produ√ß√£o Detalhada", "Resumo Financeiro", "An√°lise de Qualidade", "Custos e Insumos", "An√°lise por Local"]
    )
    
    try:
        start_date, end_date = report_date_range
    except:
        start_date, end_date = min_date, max_date
    
    filtered_prod = productions_df[
        (pd.to_datetime(productions_df['date']).dt.date >= start_date) &
        (pd.to_datetime(productions_df['date']).dt.date <= end_date) &
        (productions_df['local'].isin(selected_locations)) &
        (productions_df['product'].isin(selected_products))
    ]
    
    if filtered_prod.empty:
        st.warning("Nenhum dado encontrado para o per√≠odo selecionado.")
        return
    
    # [Restante do c√≥digo de relat√≥rios mantido igual]

# ================================
# FUN√á√ÉO PRINCIPAL
# ================================
def main():
    # Inicializar banco de dados
    init_db()
    
    # Menu lateral atualizado com Or√°culo
    with st.sidebar:
        st.image("https://via.placeholder.com/150x50/2d5016/ffffff?text=AgroGest√£o", use_container_width=True)
        st.markdown("**Sistema de Gest√£o Agr√≠cola**")
        st.markdown("---")
        
        # Menu de navega√ß√£o atualizado
        menu_options = ["üìä Dashboard", "üìù Produ√ß√£o", "üí∞ Insumos", "üìã Relat√≥rios", "‚öôÔ∏è Configura√ß√µes", "üîÆ Or√°culo"]
        
        selected = option_menu(
            menu_title="Navega√ß√£o",
            options=menu_options,
            icons=["speedometer2", "pencil", "cash-coin", "file-text", "gear", "robot"],
            menu_icon="cast",
            default_index=0,
            styles={
                "container": {"padding": "5px", "background-color": "#1a1a1a"},
                "icon": {"color": "#2d5016", "font-size": "18px"},
                "nav-link": {"font-size": "16px", "text-align": "left", "margin": "0px", "color": "white"},
                "nav-link-selected": {"background-color": "#2d5016"},
            }
        )
    
    # Navega√ß√£o entre p√°ginas atualizada
    if selected == "üìä Dashboard":
        show_dashboard()
    elif selected == "üìù Produ√ß√£o":
        show_production_page()
    elif selected == "üí∞ Insumos":
        show_inputs_page()
    elif selected == "üìã Relat√≥rios":
        show_reports_page()
    elif selected == "‚öôÔ∏è Configura√ß√µes":
        show_settings_page()
    elif selected == "üîÆ Or√°culo":
        show_oracle_page()

# ================================
# EXECU√á√ÉO DO APLICATIVO
# ================================
if __name__ == "__main__":
    main()
